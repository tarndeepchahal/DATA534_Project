KaiserCarsAllcategories
for (i in 1:length(KaiserCarsAllcategories$carsResponse)){
KaiserCarsAllcategories[,i] <- as.numeric(as.character(KaiserCarsAllcategories[,i]))
}
carsResponseCategories <- ifelse( carsData$Type == "Small", "Small","Not small")
KaiserCarsAllcategories <- data.frame(cbind(pcaCars$x[,1:15]),carsResponseCategories,stringsAsFactors = F)
KaiserCarsAllcategories
for (i in 1:length(KaiserCarsAllcategories$carsResponse)){
KaiserCarsAllcategories[,i] <- as.numeric(as.character(KaiserCarsAllcategories[,i]))
}
for (i in 1:length(KaiserCarsAllcategories$carsResponseCategories)){
KaiserCarsAllcategories[,i] <- as.numeric(as.character(KaiserCarsAllcategories[,i]))
}
mseNormalized
mse
```{r 2d)}
mse
carsResponse <- carsData$Type
KaiserCars <- data.frame(cbind(pcaCars$x[,1:2]),carsResponse,stringsAsFactors = F)
KaiserCars[,1] <- as.numeric(as.character(KaiserCars[,1]))
KaiserCars[,2] <- as.numeric(as.character(KaiserCars[,2]))
KaiserCars$carsResponse = factor(KaiserCars$carsResponse)
carsResponse <- carsData$Type
KaiserCars <- data.frame(cbind(pcaCars$x[,1:2]),carsResponse,stringsAsFactors = F)
KaiserCars[,1] <- as.numeric(as.character(KaiserCars[,1]))
KaiserCars[,2] <- as.numeric(as.character(KaiserCars[,2]))
KaiserCars$carsResponse = factor(KaiserCars$carsResponse)
KaiserLda <- lda(carsResponse~.,data=KaiserCars,CV=T)
MultiLdaLogLoss <- MultiLogLoss(KaiserLda$posterior,as.numeric(KaiserCars$carsResponse)-1)
MultiLdaLogLoss
nT <-c()
nF <-c()
for(i in 1:10){
nT[i] <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- nnet(V7~.,data=test,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
library(nnet)
fishdata <- read.csv("fish_toxicity.csv",sep = ";")
sfish <- apply(fishdata, 2, function(v) (v-min(v))/(max(v)-min(v)))
sfish <- as.data.frame(sfish)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
sfish <- as.data.frame(sfish)
train <- sfish[ind,]
test <- sfish[-ind,]
set.seed(4521,sample.kind = "Rounding")
nT <-c()
nF <-c()
for(i in 1:10){
nT[i] <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- nnet(V7~.,data=test,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
nT[i] <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
train
fishdata <- read.csv("fish_toxicity.csv",sep = ";",header=F)
sfish <- apply(fishdata, 2, function(v) (v-min(v))/(max(v)-min(v)))
sfish <- as.data.frame(sfish)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
sfish <- as.data.frame(sfish)
train <- sfish[ind,]
test <- sfish[-ind,]
set.seed(4521,sample.kind = "Rounding")
nT <-c()
nF <-c()
for(i in 1:10){
nT[i] <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalue <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
nt
nT
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- netValueF$value/nrow(train)
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
minimumnT <- min(nt)
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(nT)
netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- netValueF$value/nrow(train)
print(nF)
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(paste("With linout True",nT))
netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- netValueF$value/nrow(train)
print(paste("with Linout as false",nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(paste("With linout True",i,nT))
netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- netValueF$value/nrow(train)
print(paste("with Linout as false"i,,nF))
library(nnet)
fishdata <- read.csv("fish_toxicity.csv",sep = ";",header=F)
sfish <- apply(fishdata, 2, function(v) (v-min(v))/(max(v)-min(v)))
sfish <- as.data.frame(sfish)
set.seed(217, sample.kind="Rounding")
ind <- sample(1:nrow(sfish), 454)
sfish <- as.data.frame(sfish)
train <- sfish[ind,]
test <- sfish[-ind,]
set.seed(4521,sample.kind = "Rounding")
nT <-c()
nF <-c()
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(paste("With linout True",i,nT))
netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <- netValueF$value/nrow(train)
print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(paste("With linout True",i,nT))
#netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
#nF[i] <- netValueF$value/nrow(train)
#print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalue$value /nrow(train)
print(paste("With linout True",i,nT[i]))
#netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
#nF[i] <- netValueF$value/nrow(train)
#print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalueT$value /nrow(train)
print(paste("With linout True",i,nT[i]))
#netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
#nF[i] <- netValueF$value/nrow(train)
#print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <-netvalueT$value /nrow(train)
print(paste("With linout True",i,nF[i]))
}
for(i in 1:10){
netvalueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nF[i] <-netvalueF$value /nrow(train)
print(paste("With linout True",i,nF[i]))
}
for(i in 1:10){
netvalueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=F)
nF[i] <-netvalueF$value /nrow(train)
print(paste("With linout True",i,nF[i]))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalueT$value /nrow(train)
testT.nn[i] <- predict(nT[i],newdata = test)
testT.err[i] <- (sum((testT.nn[i] - test$V7)^2)/nrow(test))
print(paste("With linout True",i,testT.err[i]))
#netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
#nF[i] <- netValueF$value/nrow(train)
#print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
for(i in 1:10){
netvalueT <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
nT[i] <-netvalueT$value /nrow(train)
print(paste("With linout True",i,nT[i]))
#netValueF <- nnet(V7~., data=train, size=i, trace=FALSE, linout=T)
#nF[i] <- netValueF$value/nrow(train)
#print(paste("with Linout as false",i,nF))
#nF[i] <- nnet(V7~.,data=train,size=i,trace=F,linout=F)
#print(paste("Number of hidden layer variables:", i))
#print(table(btest[,25], predict(nnbodtr, newdata=btest[,-25], type="class")))
}
test.Nrr
dataQ1 = matrix(NA, nrow=2, ncol=10)
dataQ1[1,] = c(100, 95, 125, 105, 100, 90, 135, 120, 85, 101)
dataQ1[2,] = c(90, 110, 85, 90, 95, 110, 115, 110, 105, 120)
rownames(dataQ1) = c("Goose Bar", "Cheap Dinner")
dataQ1
mu_hat <- mean(c(dataQ1[1,]),dataQ1[2,])
mu_hat <- mean(c(dataQ1[1,]),dataQ1[2,])
mu_hat <- mean(c(dataQ1[1,],dataQ1[2,]))
mu_hat <- mean(c(dataQ1[1,],dataQ1[2,]))
t1_hat <- mean(dataQ1[1,]) - mu_hat
t2_hat <- dataQ1[2,]
sgma.hat <- (9*var(t1_hat) + 9*var(t2_hat))/18
mu_hat
mu_hat
t1_hat
t2_hat
t1_hat <- mean(dataQ1[1,]) - mu_hat
sgma.hat <- (9*var(t1_hat) + 9*var(t2_hat))/18
mu_hat
t1_hat
t2_hat
t2_hat <- mean(dataQ1[2,]) - mu_hat
sgma.hat <- (9*var(t1_hat) + 9*var(t2_hat))/18
mu_hat
t1_hat
t2_hat
sgma.hat
sgma.hat <- (9*var(dataQ1[1,]) + 9*var(dataQ2[2,]))/18
sgma.hat <- (9*var(dataQ1[1,]) + 9*var(dataQ1[2,]))/18
mu_hat
t1_hat
t2_hat
sgma.hat
dataQ1 = matrix(NA, nrow=2, ncol=10)
dataQ1[1,] = c(100, 95, 125, 105, 100, 90, 135, 120, 85, 101)
dataQ1[2,] = c(90, 110, 85, 90, 95, 110, 115, 110, 105, 120)
rownames(dataQ1) = c("Goose Bar", "Cheap Dinner")
mu_hat <- sum(mean(dataQ1[1,]) + mean(dataQ1[2,])) / 2
mu_hat
tau1_hat <- mean(dataQ1[1,]) - mu_hat
tau1_hat
tau2_hat <- mean(dataQ1[2,]) - mu_hat
tau2_hat
pooled_var <- (((ncol(dataQ1) - 1) * var(dataQ1[1,])) + ((ncol(dataQ1) - 1) * var(dataQ1[2,]))) / (2*ncol(dataQ1) - 2)
pooled_var
mu_hat
t1_hat
t2_hat
sgma.hat
c <- qt(0.975,18)
c <- qt(0.975,18)
CI-Lower <- t1_hat - t2_hat-(c*sqrt(0.1+0.1))
CI_Lower <- t1_hat - t2_hat-(c*sqrt(0.1+0.1))
CI_Higher <- t1_hat - t2_hat-(c*sqrt(0.1+0.1))
CI_Lower
CI_Lower <- t1_hat - t2_hat-(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Lower
CI_Higher <- t1_hat - t2_hat+(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Lower
CI_Higher
CI_Lower
CI_Higher
c <- qt(0.975, 2*ncol(dataQ1) - 2)
se_tau1tau2 <- sqrt(pooled_var) * sqrt((1 / ncol(dataQ1)) + (1 / ncol(dataQ1)))
LI <- (tau1_hat - tau2_hat) - (c * se_tau1tau2)
UI <- (tau1_hat - tau2_hat) + (c * se_tau1tau2)
print(paste0("95% CI: [", round(LI,3), " ", round(UI,3), "]" ))
t2_hat
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/sqrt(sgma.hat*sqrt((1/10)+(1/10)))
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
t_obs <- (abs(tau1_hat - tau2_hat)) / sqrt(pooled_var) * sqrt((1 / ncol(dataQ1)) + (1 / ncol(dataQ1)))
p_val <- 2 * (1 - pt(t_obs, 18))
p_val
t_obs <- (abs(tau1_hat - tau2_hat)) / sqrt(pooled_var) * sqrt((1 / ncol(dataQ1)) + (1 / ncol(dataQ1)))
t_obs
t_observations
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/sqrt(sgma.hat)*sqrt((1/10)+(1/10)))
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/sqrt(sgma.hat)*sqrt((1/10)+(1/10))
t_observations
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
p_val
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
dataQ2
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
dataQ2
boxplot(dataQ2)
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/sqrt(sgma.hat)*sqrt((1/10)+(1/10))
t_observations
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/sqrt(sgma.hat)*sqrt(.1+.1)
t_observations
t_t <- abs(t1 - t2)/(sqrt(o_s)*sqrt(0.1 + 0.1))
t_t
t_t <- abs(t1 - t2)/(sqrt(o_s)*sqrt(0.1 + 0.1))
t_t <- abs(t1_hat - t2_hat)/(sqrt(sgma.hat)*sqrt(0.1 + 0.1))
t_t
t_observations
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/(sqrt(sgma.hat)*sqrt(.1+.1))
t_observations
t_t
t_observations
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
boxplot(combine)
combine <- rbind(dataQ1,dataQ2)
boxplot(combine)
boxplot(t(combine))
boxplot(t(dataQ1))
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
dataQ1 <- rbind(dataQ1,dataQ2)
boxplot(t(dataQ1))
boxplot(t(dataQ1),x = "Promotion types")
boxplot(t(combine),xlab="Promotion types",ylab="Profit per population")
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions
cols(promotions) <-
promo <- stack(as.data.frame(t(dataQ1)))
promo
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions
cols <- c("profit","promotion")
promotions <- stack(as.data.frame(t(dataQ1)))
colnames(cols)
colnames(cols)
promotions
cols <- c("profit","promotion")
colnames(cols)
promotions
colnames(promotions) <- cols
promotions
cols <- c("Total profit","promotion")
colnames(promotions) <- cols
summary(aov(Total Profit~promotion,data=promotions))
promotions
summary(aov(Total profit~promotion,data=promotions))
summary(aov(Totalprofit~promotion,data=promotions))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
F <- 5*6/40
F
pVal <- 1-pf(0.75,2,6)
pval
pVal
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(dataQ1)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(dataQ1)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(dataQ1)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
combine <- rbind(dataQ1,dataQ2)
```{r }
boxplot(t(combine),xlab="Promotion types",ylab="Profit per population")
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
combine <- rbind(dataQ1,dataQ2)
```{r }
boxplot(t(combine),xlab="Promotion types",ylab="Profit per population")
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(dataQ1)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
dataQ1 = matrix(NA, nrow=2, ncol=10)
dataQ1[1,] = c(100, 95, 125, 105, 100, 90, 135, 120, 85, 101)
dataQ1[2,] = c(90, 110, 85, 90, 95, 110, 115, 110, 105, 120)
rownames(dataQ1) = c("Goose Bar", "Cheap Dinner")
dataQ1
t1_hat <- mean(dataQ1[1,]) - mu_hat
t2_hat <- mean(dataQ1[2,]) - mu_hat
mu_hat <- mean(c(dataQ1[1,],dataQ1[2,]))
t1_hat <- mean(dataQ1[1,]) - mu_hat
t2_hat <- mean(dataQ1[2,]) - mu_hat
sgma.hat <- (9*var(dataQ1[1,]) + 9*var(dataQ1[2,]))/18
mu_hat
t1_hat
t2_hat
sgma.hat
mu_hat <- mean(c(dataQ1[1,],dataQ1[2,]))
t1_hat <- mean(dataQ1[1,]) - mu_hat
t2_hat <- mean(dataQ1[2,]) - mu_hat
sgma.hat <- (9*var(dataQ1[1,]) + 9*var(dataQ1[2,]))/18
mu_hat
t1_hat
t2_hat
sgma.hat
c) i)104.3
ii)1.3
iii)-1.3
iv)201.2444
```{r }
c <- qt(0.975,18)
CI_Lower <- t1_hat - t2_hat-(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Higher <- t1_hat - t2_hat+(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Lower
CI_Higher
c <- qt(0.975,18)
CI_Lower <- t1_hat - t2_hat-(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Higher <- t1_hat - t2_hat+(c*sqrt(sgma.hat)*sqrt(0.1+0.1))
CI_Lower
CI_Higher
The 95% confidence interval lies betweeen -10.72867 and 15.92867
```{r }
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/(sqrt(sgma.hat)*sqrt(.1+.1))
t_observations
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
#H0 : there is no difference in treatment and H1: there is difference in treatment
t_observations <- (abs(t1_hat - t2_hat))/(sqrt(sgma.hat)*sqrt(.1+.1))
t_observations
pvalue <- 2 * (1 - pt(t_observations,18))
pvalue
# g) Since p value is greater than 0.05, we accept the alternate hypothesis or fail to reject the null hypothesis. Thus the two promotions should result in the same average profit without much difference between the choice of promotions used
# f) Yes this is a reasonable assesment since the cafe's were randomly chosen without replacement.
```{r }
dataQ2 = matrix(NA, nrow=1, ncol=10)
dataQ2[1,] = c(250, 175, 140, 200, 195, 165, 145, 180, 210, 180)
rownames(dataQ2) = c("Carbwich")
combine <- rbind(dataQ1,dataQ2)
```{r }
boxplot(t(combine),xlab="Promotion types",ylab="Profit per population")
boxplot(t(combine),xlab="Promotion types",ylab="Profit per population")
# b) The variation for all the 3 promotion types looks to be equal due to equal size groups
```{r }
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(dataQ1)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
promotions <- as.numeric(unlist(dataQ1[1,], dataQ1[2,], dataQ2[1,]))
promotions <- stack(as.data.frame(t(promotions)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
promotions <- stack(as.data.frame(t(combine)))
cols <- c("Totalprofit","promotion")
colnames(promotions) <- cols
promotions
summary(aov(Totalprofit~promotion,data=promotions))
use_travis()
library(devtools)
install.packages(devtools)
"devtools"
install.packages("devtools")
devtools::use_travis()
devtools::use_travis()
devtools::uses_testthat()
usethis::use_travis()
setwd("C:/Users/shahi/Desktop/Data534Project/DATA534_Project")
usethis::use_travis()
usethis::use_travis()
